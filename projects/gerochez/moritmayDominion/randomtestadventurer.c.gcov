        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://random test adventurer 1
        -:    2://
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:#include <time.h>
        -:   11:#include <stdlib.h>
        -:   12: 
        -:   13:
function main called 1 returned 100% blocks executed 81%
        1:   14:int main(){
        -:   15:
      101:   16:for (int testRun = 0; testRun < 100; testRun++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   17:
        -:   18:  struct gameState state;
      100:   19:  int k[10] = {adventurer, gardens, embargo, village, great_hall, mine, cutpurse,
        -:   20:	       sea_hag, tribute, smithy};
        -:   21:  int p;
      100:   22:  srand(time(0));
call    0 returned 100%
call    1 returned 100%
        -:   23:
        -:   24:  //randomize number of players from 1-5
      100:   25:  p = (rand()%5)+1;
call    0 returned 100%
      100:   26:  initializeGame(p, k, rand(), &state);
call    0 returned 100%
call    1 returned 100%
        -:   27:  
      100:   28:  int c = 0;
      100:   29:  int s = 0;
      100:   30:  int g = 0;
      100:   31:  int currentPlayer = 0;
      100:   32:  int drawnTreasure = 0;
      100:   33:  int cardDrawn = state.hand[currentPlayer][state.handCount[currentPlayer]-1];
        -:   34:  
      300:   35:  while (drawnTreasure <2){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
      600:   36:      for (currentPlayer = 0; currentPlayer <5; currentPlayer++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    13000:   37:         for (int i = 0; i < 25; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    12500:   38:            if (cardDrawn == copper){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    12500:   39:                c++;
    12500:   40:                drawnTreasure++;
        -:   41:            }
    #####:   42:            else if (cardDrawn == silver){
branch  0 never executed
branch  1 never executed
    #####:   43:                s++;
    #####:   44:                drawnTreasure++;
        -:   45:            } 
    #####:   46:            else if (cardDrawn == gold){
branch  0 never executed
branch  1 never executed
    #####:   47:                g++;
    #####:   48:                drawnTreasure++;
        -:   49:            }
        -:   50:        }
        -:   51:     }
        -:   52:  }
      100:   53:    if ((c + s + g) > 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      100:   54:        printf("adventurer test failed\n");
call    0 returned 100%
        -:   55:        }
        -:   56:    else{
    #####:   57:        printf("adventurer test passed\n");
call    0 never executed
        -:   58:    }
        -:   59:}
        1:   60:return 0;
        -:   61:}
