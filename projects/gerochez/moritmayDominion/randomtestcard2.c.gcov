        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <time.h>
        -:    8:#include "rngs.h"
        -:    9:
function main called 2 returned 100% blocks executed 74%
        2:   10:int main()
        -:   11:{
        2:   12:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   13:
        2:   14:	int k[10] = {adventurer, village, steward, smithy, embargo,
        -:   15:		    gardens, council_room, great_hall, minion, outpost};
        -:   16:
        -:   17:	struct gameState G, GT;
        -:   18:	
        2:   19:	int newCards = 0;
        2:   20:	int discarded = 1;
        2:   21:	int shuffledCards = 0;
        2:   22:	int extraCoins = 0;
        -:   23:	
        -:   24:	int i, j, n, r;
        2:   25:	int seed = 1000;
        2:   26:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        2:   27:	int numPlayers = 2;
        -:   28:	int thisPlayer, otherPlayer;
        -:   29:
        2:   30:	printf("BEGINNING RANDOM TESTS\n");
call    0 returned 100%
        -:   31:
     4002:   32:	for (n = 0; n < 2000; n++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   33:	{
        -:   34:		
        -:   35:		//initialize game, then set the player randomly
     4000:   36:		initializeGame(numPlayers, k, seed, &G);	
call    0 returned 100%
     4000:   37:		thisPlayer = rand() % 2;
call    0 returned 100%
        -:   38:
        -:   39:		//set the turn to thisPlayer, then copy to test state
     4000:   40:		G.whoseTurn = thisPlayer;
        -:   41:	
        -:   42:		
        -:   43:		//Set other player
     4000:   44:		if (thisPlayer == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   45:		{
     1993:   46:			otherPlayer = 1;
        -:   47:		}
        -:   48:		else
        -:   49:		{
     2007:   50:			otherPlayer = 0;
        -:   51:			
        -:   52:			//Perform some initialization for player 1 since
        -:   53:			//initializeGame defaults to and initializes player 0
     2007:   54:			G.handCount[G.whoseTurn] = 0;
    12042:   55:			for (i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   56:			{
    10035:   57:				drawCard(G.whoseTurn, &G);
call    0 returned 100%
        -:   58:			}
        -:   59:		}
        -:   60:
     4000:   61:		memcpy(&GT, &G, sizeof(struct gameState));
        -:   62:
        -:   63:		//call smithy with GT
     4000:   64:		r = cardEffect(great_hall, choice1, choice2, choice3, &GT, handpos, &bonus);
call    0 returned 100%
        -:   65:
     4000:   66:		newCards = 1;
        -:   67:
        -:   68:		//printf("Testing Player: %d\n", thisPlayer);
        -:   69:
        -:   70:		//printf("Hand Count = %d, expected %d\n", GT.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
     4000:   71:		assert(GT.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   72:		//printf("Deck Count = %d, expected %d\n", GT.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
     4000:   73:		assert(GT.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   74:		//printf("Coins = %d, expected %d\n", GT.coins, G.coins + extraCoins);
     4000:   75:		assert(GT.coins == G.coins + extraCoins);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   76:		//printf("Checking Victory card piles...\n");
     4000:   77:		assert(GT.supplyCount[estate] == G.supplyCount[estate]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     4000:   78:		assert(GT.supplyCount[duchy] == G.supplyCount[duchy]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     4000:   79:		assert(GT.supplyCount[province] == G.supplyCount[province]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   80:		//printf("Checking Kingdom card piles...\n");
    44000:   81:		for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   82:		{
    40000:   83:			assert(G.supplyCount[k[i]] == GT.supplyCount[k[i]]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   84:		}
        -:   85:		//printf("Checking Hand, Deck, Discard, Coins of other player...\n");
     4000:   86:		assert(GT.handCount[otherPlayer] == G.handCount[otherPlayer]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     4000:   87:		assert(GT.discardCount[otherPlayer] == G.discardCount[otherPlayer]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     4000:   88:		assert(GT.deckCount[otherPlayer] == G.deckCount[otherPlayer]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     4000:   89:		assert(GT.coins == G.coins);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   90:	}
        -:   91:
        2:   92:	printf("ALL TESTS PASSED\n");
call    0 returned 100%
        -:   93:
        2:   94:	return 0;
        -:   95:}
