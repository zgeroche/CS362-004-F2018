        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Test for whoseTurn()
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * unittest4: unittest4.c dominion.o rngs.o
        -:    6: * 	gcc -o unittest4 -g unittest4.c dominion.o rngs.o $(CFLAGS)
        -:    7: *
        -:    8:*/
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
function main called 1 returned 100% blocks executed 92%
        1:   17:int main()
        -:   18:{
        -:   19:	int i, p, r;
        1:   20:	int seed = 1000;
        1:   21:	int numPlayers = 4;
        1:   22:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   23:		     remodel, smithy, village, baron, great_hall};
        -:   24:	struct gameState G;
        -:   25:
        1:   26:	printf("Testing whoseTurn()\n");
call    0 returned 100%
        -:   27:
        -:   28:
        5:   29:	for (p = 0; p < numPlayers; p++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   30:	{
        4:   31:		memset(&G, 23, sizeof(struct gameState));
        4:   32:		r = initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        4:   33:		G.whoseTurn = p;
        -:   34:
        4:   35:		printf("whoseTurn() returned %d, expected %d\n", whoseTurn(&G), p);
call    0 returned 100%
call    1 returned 100%
        4:   36:		assert(whoseTurn(&G) == p);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   37:	}
        1:   38:	printf("All tests passed!\n");
call    0 returned 100%
        -:   39:}
